What is Angular
https://docs.angularjs.org/guide/introduction
AngularJS is a structural framework for dynamic web apps. It lets use HTML as your template language 
and extend HTML's syntax to express your applications components.  line <input ng-model =""></input> insted of "value" syntax "ng-model" is there. 

The impedance(measure of the opposition) mismatch between dynamic applications and static documents solved to great extent. 
by creating new HTML constructs using directives.
a>Data binding, as in {{}}.
b>DOM control structures for repeating, showing and hiding DOM fragments.
c>Support for forms and form validation.
d>Attaching new behavior to DOM elements, such as DOM event handling.
e>Grouping of HTML into reusable components.

Client side MVC (Model View Controller) frameworks separate data model from its presentation. 
model becomes the single source of truth. If you change it, your HTML template changes automatically. 
If you want to know its current value, you read it from the model instead of the DOM.

What is module?
module as a container for the different parts of your app – controllers, services, filters, directives, etc.
During bootstrap process configuration and run blocks get applied to the application .
a>Configuration blocks( provider-injector)You can only inject Providers (not instances)
config(function($provide, $compileProvider, $filterProvider))
all of the services configured and the injector has been created.

b>Run blocks (instance-injector)You can only inject instances (not Providers)
get executed after the injector is created and are used to kickstart the application. 
If you truly need a service to be instantiated during the lifetime of an application, regardless of the user behavior, 
you can always inject it into a .run() block for the module.
Depending on a module implies that the required module needs to be loaded before the requiring module is loaded.

Here's the calling order:
    app.config()
    app.run()
    directive's compile functions (if they are found in the dom)
    app.controller()
    directive's link functions (again if found)


What is controller?
https://docs.angularjs.org/guide/controller
defined by JavaScript constructor function used to augment(adding to) the Angular Scope($rootScope).
When a Controller is attached to DOM via the ng-controller directive, Angular will instantiate a new Controller object, using Controller's constructor function. 
A new child scope as $scope will be created and made available as an injectable parameter to the Controller's constructor function.

What is directive ?
Directives are markers on a DOM element (such as an attribute, element name, CSS class) that tell AngularJS's HTML compiler $compile)
to attach a behavior or even transform the DOM element and its children.
For AngularJS, "compilation" means attaching event listeners to the HTML to make it interactive.

What is scope?
Scope is an object that refers to the application model.
Scopes provide APIs ($watch) to observe model mutations(changes).
Scopes provide APIs ($apply) to propagate any model changes into the view 
Scope is the glue between application controller and the view. 
During the template linking phase the directives set up $watch expressions on the scope. 
The $watch allows the directive to render the updated value to the DOM.
The location where the root scope is attached to the DOM is defined by the location of ng-app directive

What is Scope Life Cycle?

What is service?
https://docs.angularjs.org/guide/services
You can use services to organize and share code across your app.
Angular services are substitutable objects that are wired together using dependency injection (DI). 

What is data binding?
https://docs.angularjs.org/guide/databinding
Data-binding in Angular apps is the automatic synchronization of data between the model and view components.

What is dependency injection?
Dependency Injection (DI) is a software design pattern that deals with how components hold of their dependencies.
The Angular injector is in charge of creating components, resolving their dependencies, and providing them to other components as requested.
Components such as services, directives, filters, and animations can be injected with "service" and "value" components as dependencies like $rootScope .
Controllers can be injected with any of the "service" and "value" with special dependencies like $scope.
run method can be injected with "service", "value" and "constant" components as dependencies.
config method can be injected with "provider" and "constant" components as dependencies

using inline array , $inject ,function parameter names

Why not Dom manipulation by angularJs?
http://ng-learn.org/2014/01/Dom-Manipulations/

What is digest cycle?
http://www.sitepoint.com/understanding-angulars-apply-digest/
http://onehungrymind.com/notes-on-angularjs-scope-life-cycle/	
if you change any model outside of the Angular context, then you need to inform Angular of the changes by calling $apply() manually
which triggers a $digest cycle. 
Angular doesn’t directly call $digest(). Instead, it calls $scope.$apply(), which in turn calls $rootScope.$digest(). 
As a result a digest cycle starts at the $rootScope, and subsequently visits all the child scopes calling the watchers along the way.